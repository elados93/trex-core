#! /bin/bash
"source" "find_python.sh" "--local"
"exec" "$PYTHON" "$0" "$@"

import os, sys
import tempfile
import time
import subprocess, shlex
from argparse import ArgumentParser, RawTextHelpFormatter
import errno
import pwd


def fail(msg):
    print(msg)
    sys.exit(-1)

if os.getuid() != 0:
    fail('Please run this program as root/with sudo')

cur_dir = os.path.abspath(os.path.dirname(__file__))
ext_libs_path = os.path.join(cur_dir, 'external_libs')
if ext_libs_path not in sys.path:
    sys.path.append(ext_libs_path)

from netstat import netstat
from termstyle import termstyle


def inv(f):
    return lambda *a, **k: not f(*a, **k)


def progress(success_check, start_msg, success_msg, fail_msg, timeout = 35, poll_rate = 0.5, fail_check = None):
    sys.stdout.write('%s...' % start_msg)
    sys.stdout.flush()
    for i in range(int(timeout/poll_rate)):
        if success_check():
            print(termstyle.green(' ' + success_msg))
            return 0
        if fail_check and fail_check():
            print(termstyle.red(' ' + fail_msg))
            return 1
        time.sleep(poll_rate)
        sys.stdout.write('.')
        sys.stdout.flush()
    print(termstyle.red(' Timeout'))
    return 1


def run_command(command, timeout = 30, poll_rate = 0.1, cwd = None, is_daemon = False):
    if not is_daemon:
        assert timeout > 0, 'Timeout should be positive'
        assert poll_rate > 0, 'Poll rate should be positive'

    try: # P2
        stdout_file = tempfile.TemporaryFile(bufsize = 0)
    except: # P3
        stdout_file = tempfile.TemporaryFile(buffering = 0)

    try:
        proc = subprocess.Popen(shlex.split(command), stdout = stdout_file, stderr = subprocess.STDOUT, cwd = cwd,
                                close_fds = True, universal_newlines = True)
        if is_daemon:
            return proc, stdout_file
        for i in range(int(timeout/poll_rate)):
            time.sleep(poll_rate)
            if proc.poll() is not None: # process stopped
                break
        if proc.poll() is None:
            proc.kill() # timeout
            stdout_file.seek(0)
            return (errno.ETIMEDOUT, '%s\n\n...Timeout of %s second(s) is reached!' % (stdout_file.read(), timeout))
        stdout_file.seek(0)
        return (proc.returncode, stdout_file.read())
    finally:
        if not is_daemon:
            stdout_file.close()

def get_pybird_pid():
    pid = None
    for conn in netstat.netstat(with_pid = True, search_local_port = args.port):
        if conn[2] == '0.0.0.0' and conn[6] == 'LISTEN':
            pid = conn[7]
            if pid is None:
                raise Exception('Found the connection, but could not determine pid: %s' % conn)
            break
    return pid


def is_pybird_running():
    return get_pybird_pid() is not None

def show_daemon_status():
    if is_pybird_running():
        print(termstyle.green('PyBird server is running'))
    else:
        print(termstyle.red('PyBird server is NOT running'))

def start_pybird():
    if is_pybird_running():
        print(termstyle.red('PyBird server is already running'))
        return

    server_path = os.path.join(cur_dir, 'automation', 'trex_control_plane', 'interactive')
    cmd = 'sudo taskset -c {core} {python} -m trex.pybird_server.bird_zmq_server -p {port} -v -l'.format(core = args.core, python = sys.executable, port = args.port)
    proc, stdout_file = run_command(cmd, is_daemon = True, cwd = server_path)
    ret = progress(is_pybird_running, 'Starting PyBird server', 'PyBird server is started', 'PyBird server failed to run', fail_check = proc.poll)
    if proc.poll():
        stdout_file.seek(0)
        print('Output: %s' % stdout_file.read())
        stdout_file.close()
        sys.exit(1)

def restart_all():
    need_to_sleep = False
    if is_pybird_running():
        need_to_sleep = True
        kill_pybird()
    if need_to_sleep:
        time.sleep(0.5)
    start_pybird()

def kill_pybird():
    pid = get_pybird_pid()
    if pid is None:
        print(termstyle.red('PyBird server is NOT running'))
        return True
    run_command('kill %s' % pid) # usual kill
    ret = progress(inv(is_pybird_running), 'Killing PyBird server', 'PyBird server is killed', 'failed', timeout = 15)
    if not ret:
        return
    _, out = run_command('kill -9 %s' % pid) # unconditional kill
    ret = progress(inv(is_pybird_running), 'Killing PyBird server with -9', 'PyBird server is killed', 'failed', timeout = 15)
    if ret:
        fail('Failed to kill PyBird server, even with -9. Please review manually.\nOutput: %s' % out)

### Main ###

if __name__ == '__main__':
    actions_help = '''Specify action command to be applied on server.
        (*) start      : start the application in as a daemon process.
        (*) show       : prompt an updated status of daemon (running/ not running).
        (*) stop       : exit PyBird server daemon process.
        (*) restart    : stop, then start again the application as daemon process.
        '''
    action_funcs = {'start': start_pybird,
                    'show': show_daemon_status,
                    'stop': kill_pybird,
                    'restart': restart_all,
                    }
    
    parser = ArgumentParser(description = 'Runs PyBird server application.',
        formatter_class = RawTextHelpFormatter,
    )
    
    parser.add_argument('-p', '--port', type = int, default = 4505,
            help='Select tcp port on which PyBird server will listen.\nDefault is 4509.')
    parser.add_argument('-c', '--core', type = int, default = 0,
            help='Core number to set affinity.\nAdvised to set on free core or TRex master thread core\nDefault is 0.')
    parser.add_argument('action', choices=action_funcs.keys(),
                            action='store', help=actions_help)
    parser.usage = None
    args = parser.parse_args()
    
    action_funcs[args.action]()
